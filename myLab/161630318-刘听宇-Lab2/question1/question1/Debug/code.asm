; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26726.0 

	TITLE	D:\Github-repository\Assemble-Language\myLab\161630318-刘听宇-Lab2\question1\question1\code.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__320E01E0_corecrt_stdio_config.h DB 01H
__BAC7FC50_corecrt_wstdio.h DB 01H
__A3797CDC_stdio.h DB 01H
__67FC6420_code.c DB 01H
msvcjmc	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_cf58
PUBLIC	_cf59
PUBLIC	_cf510
PUBLIC	_main
PUBLIC	??_C@_03PMGGPEJJ@?$CFd?6@			; `string'
PUBLIC	??_C@_06EDCKJEOI@?$CF?5?9?54d@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_05PDJBBECF@pause@				; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__system:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_05PDJBBECF@pause@
CONST	SEGMENT
??_C@_05PDJBBECF@pause@ DB 'pause', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06EDCKJEOI@?$CF?5?9?54d@
CONST	SEGMENT
??_C@_06EDCKJEOI@?$CF?5?9?54d@ DB '% - 4d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PMGGPEJJ@?$CFd?6@
CONST	SEGMENT
??_C@_03PMGGPEJJ@?$CFd?6@ DB '%d', 0aH, 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\github-repository\assemble-language\mylab\161630318-刘听宇-lab2\question1\question1\code.c
;	COMDAT _main
_TEXT	SEGMENT
_i$ = -128						; size = 4
_row$ = -116						; size = 20
_p$ = -88						; size = 12
_data$ = -68						; size = 60
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 10   : int main() {

	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __67FC6420_code.c
	call	@__CheckForDebuggerJustMyCode@4

; 11   : 	int data[3][5] = { 

	mov	DWORD PTR _data$[ebp], 1
	mov	DWORD PTR _data$[ebp+4], 2
	mov	DWORD PTR _data$[ebp+8], 3
	mov	DWORD PTR _data$[ebp+12], 4
	mov	DWORD PTR _data$[ebp+16], 5
	mov	DWORD PTR _data$[ebp+20], 11		; 0000000bH
	mov	DWORD PTR _data$[ebp+24], 12		; 0000000cH
	mov	DWORD PTR _data$[ebp+28], 13		; 0000000dH
	mov	DWORD PTR _data$[ebp+32], 14		; 0000000eH
	mov	DWORD PTR _data$[ebp+36], 15		; 0000000fH
	mov	DWORD PTR _data$[ebp+40], 101		; 00000065H
	mov	DWORD PTR _data$[ebp+44], 102		; 00000066H
	mov	DWORD PTR _data$[ebp+48], 103		; 00000067H
	mov	DWORD PTR _data$[ebp+52], 104		; 00000068H
	mov	DWORD PTR _data$[ebp+56], 105		; 00000069H

; 12   : 		{1, 2, 3, 4, 5},
; 13   : 		{11, 12, 13, 14, 15},
; 14   : 	    {101, 102, 103, 104, 105} 
; 15   : 	};
; 16   : 
; 17   : 	int *p[3] = { data[0], data[1], data[2] };

	lea	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _p$[ebp], eax
	lea	eax, DWORD PTR _data$[ebp+20]
	mov	DWORD PTR _p$[ebp+4], eax
	lea	eax, DWORD PTR _data$[ebp+40]
	mov	DWORD PTR _p$[ebp+8], eax

; 18   : 	int row[5];
; 19   : 	int i;
; 20   : 
; 21   : 	printf( "%d\n", cf58(data[0]) );		//调用cf58

	mov	eax, 20					; 00000014H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _data$[ebp+ecx]
	push	edx
	call	_cf58
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_03PMGGPEJJ@?$CFd?6@
	call	_printf
	add	esp, 8

; 22   : 	printf( "%d\n", cf59(p, 2) );			//调用cf59

	push	2
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_cf59
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_03PMGGPEJJ@?$CFd?6@
	call	_printf
	add	esp, 8

; 23   : 	cf510(data, row, 0);					//调用cf510

	push	0
	lea	eax, DWORD PTR _row$[ebp]
	push	eax
	lea	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_cf510
	add	esp, 12					; 0000000cH

; 24   : 	
; 25   : 	for (i = 0; i < 5; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@main:
	cmp	DWORD PTR _i$[ebp], 5
	jge	SHORT $LN3@main

; 26   : 		printf("% - 4d", row[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _row$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_06EDCKJEOI@?$CF?5?9?54d@
	call	_printf
	add	esp, 8

; 27   : 	}

	jmp	SHORT $LN2@main
$LN3@main:

; 28   : 	printf("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	call	_printf
	add	esp, 4

; 29   : 
; 30   : 	system("pause");

	mov	esi, esp
	push	OFFSET ??_C@_05PDJBBECF@pause@
	call	DWORD PTR __imp__system
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 31   : 
; 32   : 	return 0;

	xor	eax, eax

; 33   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@main:
	DD	3
	DD	$LN9@main
$LN9@main:
	DD	-68					; ffffffbcH
	DD	60					; 0000003cH
	DD	$LN6@main
	DD	-88					; ffffffa8H
	DD	12					; 0000000cH
	DD	$LN7@main
	DD	-116					; ffffff8cH
	DD	20					; 00000014H
	DD	$LN8@main
$LN8@main:
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
$LN7@main:
	DB	112					; 00000070H
	DB	0
$LN6@main:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\github-repository\assemble-language\mylab\161630318-刘听宇-lab2\question1\question1\code.c
;	COMDAT _cf510
_TEXT	SEGMENT
_j$ = -8						; size = 4
_matrix$ = 8						; size = 4
_line$ = 12						; size = 4
_i$ = 16						; size = 4
_cf510	PROC						; COMDAT

; 55   : void cf510(int matrix[][5], int line[], int i) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __67FC6420_code.c
	call	@__CheckForDebuggerJustMyCode@4

; 56   : 	int j;
; 57   : 	for (j = 0; j < 5; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@cf510
$LN2@cf510:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@cf510:
	cmp	DWORD PTR _j$[ebp], 5
	jge	SHORT $LN1@cf510

; 58   : 		line[j] = matrix[i][j];

	imul	eax, DWORD PTR _i$[ebp], 20
	add	eax, DWORD PTR _matrix$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _line$[ebp]
	mov	esi, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [edx+ecx*4], eax

; 59   : 	}

	jmp	SHORT $LN2@cf510
$LN1@cf510:

; 60   : 
; 61   : 	return;
; 62   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf510	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\github-repository\assemble-language\mylab\161630318-刘听宇-lab2\question1\question1\code.c
;	COMDAT _cf59
_TEXT	SEGMENT
_s$ = -8						; size = 4
_ppt$ = 8						; size = 4
_i$ = 12						; size = 4
_cf59	PROC						; COMDAT

; 46   : int cf59(int **ppt, int i) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __67FC6420_code.c
	call	@__CheckForDebuggerJustMyCode@4

; 47   : 	int s = 0;

	mov	DWORD PTR _s$[ebp], 0

; 48   : 
; 49   : 	s += * ( *ppt + i );			//ppt[0][i]

	mov	eax, DWORD PTR _ppt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _s$[ebp], eax

; 50   : 	s += * ( * (ppt + i) );			//ppt[i][0]

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ppt$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [edx]
	mov	DWORD PTR _s$[ebp], eax

; 51   : 
; 52   : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 53   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf59	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\github-repository\assemble-language\mylab\161630318-刘听宇-lab2\question1\question1\code.c
;	COMDAT _cf58
_TEXT	SEGMENT
_s$ = -8						; size = 4
_pit$ = 8						; size = 4
_cf58	PROC						; COMDAT

; 35   : int cf58(int *pit) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __67FC6420_code.c
	call	@__CheckForDebuggerJustMyCode@4

; 36   : 	int s = 0;

	mov	DWORD PTR _s$[ebp], 0

; 37   : 
; 38   : 	s += *(pit++);			//累加第0个元素值，并指向下一个元素

	mov	eax, DWORD PTR _pit$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s$[ebp], ecx
	mov	edx, DWORD PTR _pit$[ebp]
	add	edx, 4
	mov	DWORD PTR _pit$[ebp], edx

; 39   : 	s += *(++pit);			//累加第2个元素值

	mov	eax, DWORD PTR _pit$[ebp]
	add	eax, 4
	mov	DWORD PTR _pit$[ebp], eax
	mov	ecx, DWORD PTR _pit$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [ecx]
	mov	DWORD PTR _s$[ebp], edx

; 40   : 	s += (*pit)++;			//累加第二个元素值，第二个元素值加1

	mov	eax, DWORD PTR _pit$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s$[ebp], ecx
	mov	edx, DWORD PTR _pit$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _pit$[ebp]
	mov	DWORD PTR [ecx], eax

; 41   : 	s += ++(*pit);			//第二个元素值加1，并累加

	mov	eax, DWORD PTR _pit$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _pit$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _pit$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s$[ebp], ecx

; 42   : 
; 43   : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 44   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cf58	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A3797CDC_stdio.h
	call	@__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	esi, esp
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 961  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A3797CDC_stdio.h
	call	@__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 644  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 85   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __320E01E0_corecrt_stdio_config.h
	call	@__CheckForDebuggerJustMyCode@4

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
